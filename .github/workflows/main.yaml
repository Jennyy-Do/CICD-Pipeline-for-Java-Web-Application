name: CI/CD Pipeline for Java Web Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Debugging - List files in the root directory
      - name: List files in the root directory
        run: ls -la

      # Step 3: Debugging - List files in the app directory (if it exists)
      - name: List files in the 'app' directory
        run: ls -la ./App || echo "No app directory found"

      # Step 4: Set up Java environment
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
  
      # Step 5: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 6: Build and test the application
      - name: Build and test with Maven
        run: mvn clean verify
        working-directory: ./App # Adjust this if your pom.xml is in a different directory

      # Step 7: Package application into a WAR file
      - name: Package application
        run: mvn package -DskipTests
        working-directory: ./App # Adjust this if your pom.xml is in a different directory

      # Step 8: Upload the WAR file as an artifact (optional)
      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app.war
          path: App/target/*.war

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java environment
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 3: Ensure EB CLI is installed 
      - name: Ensure EB CLI is installed
        run: |
          pip install --upgrade awscli
          pip install --upgrade awsebcli
          aws --version
          eb --version

      # Step 4: Configure AWS CLI with Credentials
      - name: Configure AWS CLI
        run: |
          echo "Configuring AWS CLI"
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-west-2
          aws sts get-caller-identity

      #5 Step 5: Check the target directory for the WAR file 
      - name: Check target directory for WAR file 
        run: |
          echo "Checking for WAR file"
          ls -la ./target || { echo "Target directory not found or empty"; exit 1 }
          ls -la ./target/*.war || ( echo "WAR file not found"; exit 1; }

      # Step 6: Initializing EB CLI and verifying application and environment
      - name: Initialize Elastic Beanstalk CLI
        run: |
          echo "Initializing EB CLI for application and environment"
          eb init -p java my-app --region us-west-2 --debug || { echo "EB init failed"; exit 1; }

      - name: Check EB Environments
        run: |
          echo "Listing EB environments to verify existence"
          eb list --region us-west-2 --debug || { echo "EB list failed"; exit 1; }

      # step 7: Deploy to AWS Elastic Beanstalk
      - name: Deploy to AWS Elastic Beanstalk
        run: |
          echo "Attempting to deploy application"
          eb deploy --debug || { echo "EB deploy failed"; exit 1; }
