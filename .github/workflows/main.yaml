name: CI/CD Pipeline for Java Web Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Debugging - List files in the root directory
      - name: List files in the root directory
        run: ls -la

      # Step 3: Debugging - List files in the app directory (if it exists)
      - name: List files in the 'app' directory
        run: ls -la ./App || echo "No app directory found"

      # Step 4: Set up Java environment
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
  
      # Step 5: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 6: Build and test the application
      - name: Build and test with Maven
        run: mvn clean verify
        working-directory: ./App # Adjust this if your pom.xml is in a different directory

      # Step 7: Package application into a WAR file
      - name: Package application
        run: mvn package -DskipTests
        working-directory: ./App # Adjust this if your pom.xml is in a different directory

      # Step 8: Upload the WAR file as an artifact (optional)
      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app.war
          path: App/target/*.war

    # Deployment job that runs after the build-and-test job completes successfully
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code again for the deployment job
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up JDK again for consistency across jobs
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 3: Ensure AWS CLI is installed
      # This installs the AWS CLI if itâ€™s not already available in the runner environment
      - name: Ensure AWS CLI is installed
        run: |
          if ! command -v aws &> /dev/null
          then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
        shell: bash

      # Step 4: Configure AWS CLI with credentials from GitHub secrets
      # The access keys are stored as GitHub secrets for security
      - name: Configure AWS CLI with credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-west-2  # Update to your desired AWS region
          aws sts get-caller-identity  # Verifies AWS configuration

      # Step 5: Check that the WAR file exists in the target directory
      # Ensures the build process created the WAR file as expected before deployment
      - name: Check target directory for WAR file
        run: |
          if [ ! -f target/*.war ]; then
            echo "WAR file not found in target directory. Check the build process."
            exit 1
          fi

      # Step 6: Install Elastic Beanstalk CLI if not already installed
      # Elastic Beanstalk CLI (EB CLI) is used to deploy to Elastic Beanstalk
      - name: Initialize Elastic Beanstalk CLI
        run: |
          if ! command -v eb &> /dev/null
          then
            echo "Elastic Beanstalk CLI not found, installing..."
            pip install --upgrade --user awsebcli
          fi

      # Step 7: Deploy the application to AWS Elastic Beanstalk
      # This navigates to the directory with the WAR file, initializes EB CLI, and deploys the app
      - name: Deploy to AWS Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2  # Update with your region
          APPLICATION_NAME: "YourElasticBeanstalkApp"  # Update with your Elastic Beanstalk application name
          ENVIRONMENT_NAME: "YourEnvironmentName"      # Update with your Elastic Beanstalk environment name
        run: |
          # Navigate to the target directory containing the WAR file
          cd target
          # Initialize Elastic Beanstalk CLI for the application and region
          eb init $APPLICATION_NAME --region $AWS_REGION
          # Set the environment for deployment
          eb use $ENVIRONMENT_NAME
          # Deploy the application using EB CLI
          eb deploy --staged
